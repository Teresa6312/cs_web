# Generated by Django 2.0.7 on 2018-09-01 13:57

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.expressions
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(default='', max_length=254, unique=True, verbose_name='Email')),
                ('email_confirmed', models.BooleanField(default=False, verbose_name='Email Confirmed')),
                ('phone', models.CharField(blank=True, default='', max_length=16, validators=[django.core.validators.RegexValidator(message='Invalid phone number format. Enter as 123-456-0987.', regex='^\\s*(?:\\+?(\\d{1,3}))?[-. (]*(\\d{3})[-. )]*(\\d{3})[-. ]*(\\d{4})(?: *x(\\d+))?\\s*$')], verbose_name='Phone Number')),
                ('reward', models.PositiveIntegerField(default=0)),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='Birthday')),
                ('updated_date', models.DateTimeField(auto_now=True, null=True, verbose_name='Profile Updated Date')),
                ('country', models.CharField(blank=True, default='', max_length=100, verbose_name='Country')),
                ('language', models.CharField(blank=True, default='', max_length=100, verbose_name='Prefer Language')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'Users',
                'ordering': ['-id'],
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Creation Date')),
                ('address', models.CharField(default='', max_length=500, verbose_name='address')),
                ('apt', models.CharField(blank=True, default='', max_length=200, verbose_name='Address2/Apartment')),
                ('city', models.CharField(default='', max_length=100, verbose_name='City')),
                ('state', models.CharField(default='', max_length=100, verbose_name='State/Province')),
                ('country', models.CharField(default='', max_length=100, verbose_name='Country')),
                ('zipcode', models.CharField(default='', max_length=5, validators=[django.core.validators.RegexValidator(message='Plese Enter a valid zip code.', regex='^(\\d{5})*$')], verbose_name='Zip Code')),
                ('memo', models.TextField(blank=True, default='', verbose_name='Memo')),
                ('updated_date', models.DateTimeField(auto_now=True, null=True, verbose_name='Address Updated Date')),
                ('first_name', models.CharField(default='', max_length=100, verbose_name='First Name')),
                ('last_name', models.CharField(default='', max_length=100, verbose_name='Last Name')),
                ('phone', models.CharField(default='', max_length=16, validators=[django.core.validators.RegexValidator(message='Invalid phone number format. Enter as 123-456-0987.', regex='^\\s*(?:\\+?(\\d{1,3}))?[-. (]*(\\d{3})[-. )]*(\\d{3})[-. ]*(\\d{4})(?: *x(\\d+))?\\s*$')], verbose_name='Phone Number')),
            ],
            options={
                'verbose_name_plural': 'Addresses',
            },
        ),
        migrations.CreateModel(
            name='CoReceiver',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, default='', max_length=100, verbose_name='First Name')),
                ('last_name', models.CharField(blank=True, default='', max_length=100, verbose_name='Last Name')),
                ('phone', models.CharField(blank=True, default='', max_length=16, validators=[django.core.validators.RegexValidator(message='Invalid phone number format. Enter as 123-456-0987.', regex='^\\s*(?:\\+?(\\d{1,3}))?[-. (]*(\\d{3})[-. )]*(\\d{3})[-. ]*(\\d{4})(?: *x(\\d+))?\\s*$')], verbose_name='Phone Number')),
            ],
            options={
                'verbose_name_plural': 'Co-receiver',
            },
        ),
        migrations.CreateModel(
            name='Coupon',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Creation Date')),
                ('updated_date', models.DateTimeField(auto_now=True, null=True, verbose_name='Coupon Updated Date')),
                ('code', models.CharField(default='', max_length=20, unique=True, verbose_name='Coupon Code')),
                ('discount', models.PositiveIntegerField(default=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20)], verbose_name='Discount')),
                ('amount_limit', models.PositiveIntegerField(blank=True, null=True, verbose_name='Amount Limit')),
                ('start_date', models.DateTimeField(blank=True, null=True, verbose_name='Start Date')),
                ('end_date', models.DateTimeField(blank=True, null=True, verbose_name='End Date')),
                ('package', models.BooleanField(default=False, verbose_name='Good For Package')),
                ('order', models.BooleanField(default=False, verbose_name='Good For Order')),
                ('one_time_only', models.BooleanField(default=True, verbose_name='One Time Use Only')),
                ('used_times', models.PositiveIntegerField(default=0, verbose_name='Coupon Used Times')),
                ('memo', models.TextField(blank=True, default='', verbose_name='Memo')),
            ],
            options={
                'verbose_name_plural': 'Coupon',
                'ordering': [django.db.models.expressions.OrderBy(django.db.models.expressions.F('start_date'), nulls_last=True)],
            },
        ),
        migrations.CreateModel(
            name='FavoriteWebsite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country', models.CharField(blank=True, default='', max_length=100, verbose_name='Country')),
                ('web_type', models.CharField(blank=True, choices=[('Clothing', 'Clothing'), ('Bag', 'Bag'), ('Jewelry', 'Jewelry'), ('Sport', 'Sport'), ('Beauty', 'Beauty'), ('Baby', 'Baby'), ('Other', 'Other')], default='', max_length=50, verbose_name='Websit Category')),
                ('web_name', models.CharField(blank=True, default='', max_length=100, verbose_name='Websit Name')),
                ('web_url', models.URLField(blank=True, default='', max_length=1000, verbose_name='Websit url')),
                ('rate', models.PositiveIntegerField(default=1, verbose_name='Rate')),
            ],
            options={
                'verbose_name_plural': 'Favorite Website',
                'ordering': ['web_name'],
            },
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_name', models.CharField(default='', max_length=200, verbose_name='Item Name')),
                ('item_detail', models.CharField(blank=True, default='', max_length=100, verbose_name='Item Details')),
                ('item_quantity', models.PositiveIntegerField(default=1, verbose_name='quantity')),
                ('item_value', models.DecimalField(blank=True, decimal_places=2, default=0.0, max_digits=10, verbose_name='Item Value')),
                ('currency', models.CharField(blank=True, choices=[('CNY', 'China Yuan'), ('USD', 'US Dollar')], default='', max_length=100, verbose_name='Currency')),
                ('item_url', models.CharField(blank=True, default='', max_length=1000, verbose_name='Item URL')),
                ('memo', models.TextField(blank=True, default='', verbose_name='Memo')),
                ('low_volume_request', models.BooleanField(default=True, verbose_name='Low Volume Request')),
                ('tax_included', models.BooleanField(default=True, verbose_name='Included Tax')),
            ],
            options={
                'verbose_name_plural': 'Item',
                'ordering': ['service'],
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('city', models.CharField(blank=True, default='', max_length=100, verbose_name='City')),
                ('state', models.CharField(blank=True, default='', max_length=100, verbose_name='State/Province')),
                ('country', models.CharField(default='', max_length=100, verbose_name='Country')),
                ('country_sortname', models.CharField(default='', max_length=100, verbose_name='Country Sortname')),
            ],
        ),
        migrations.CreateModel(
            name='PackageSnapshot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('snapshot', models.ImageField(upload_to='package_snapshot', verbose_name='Package Snapshot')),
            ],
            options={
                'verbose_name_plural': 'Package Snapshot',
                'ordering': ['package'],
            },
        ),
        migrations.CreateModel(
            name='ParentPackage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Creation Date')),
                ('packed_date', models.DateField(blank=True, null=True, verbose_name='Packed Date')),
                ('memo', models.TextField(blank=True, default='', verbose_name='Memo')),
                ('weight', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Weight(kg)')),
                ('tracking_num', models.CharField(blank=True, default='', max_length=50, verbose_name='Tracking Number')),
                ('carrier', models.CharField(blank=True, choices=[('ZT', 'Zhong Tong'), ('YT', 'Yuan Tong'), ('UPS', 'UPS'), ('DHL', 'DHL')], default='', max_length=100, verbose_name='Carrier')),
                ('shipped_date', models.DateField(blank=True, null=True, verbose_name='Shipped Date')),
                ('received_date', models.DateField(blank=True, null=True, verbose_name='Received Date')),
                ('issue', models.TextField(blank=True, default='', verbose_name='Package Issue')),
            ],
            options={
                'verbose_name_plural': 'Parent Package',
                'ordering': ['created_date'],
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pay_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Paid Date')),
                ('transaction_id', models.CharField(default='', max_length=50, unique=True, verbose_name='Payment Confirmation')),
                ('reward_point', models.PositiveIntegerField(default=0, verbose_name='Reward Point Used')),
                ('deposit', models.BooleanField(default=False, verbose_name='Deposit')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Paid Amount')),
                ('currency', models.CharField(choices=[('CNY', 'China Yuan'), ('USD', 'US Dollar')], default='', max_length=100, verbose_name='Currency')),
                ('memo', models.TextField(blank=True, default='', verbose_name='Memo')),
                ('coupon', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='main.Coupon', verbose_name='Coupon')),
            ],
            options={
                'verbose_name_plural': 'Payment',
                'ordering': ['pay_date'],
            },
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='', max_length=100, unique=True, verbose_name='Title')),
                ('english', models.FileField(upload_to='resource/english', verbose_name='English Version')),
                ('chinese', models.FileField(upload_to='resource/chinese', verbose_name='Chinese Version')),
            ],
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.BooleanField(default=False, verbose_name='Order')),
                ('storage', models.BooleanField(default=False, verbose_name='Storage')),
                ('co_shipping', models.NullBooleanField(verbose_name='Co-Shipping')),
                ('created_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Creation Date')),
                ('package_type', models.CharField(blank=True, choices=[('F', 'Food'), ('R', 'Regular'), ('S', 'Skincare'), ('L', 'Luxury'), ('M', 'Mix')], default='', max_length=16, verbose_name='Package Type')),
                ('request_ship_date', models.DateField(blank=True, null=True, verbose_name='Date Requested to Ship')),
                ('memo', models.TextField(blank=True, default='', verbose_name='Memo')),
                ('cust_tracking_num', models.CharField(blank=True, default='', max_length=50, verbose_name="Customer's Package's Tracking Number")),
                ('cust_carrier', models.CharField(blank=True, choices=[('ZT', 'Zhong Tong'), ('YT', 'Yuan Tong'), ('UPS', 'UPS'), ('DHL', 'DHL')], default='', max_length=100, verbose_name="Customer's Package's Carrier")),
                ('low_volume_request', models.BooleanField(default=False, verbose_name='Low Volume Request')),
                ('no_rush_request', models.BooleanField(default=False, verbose_name='No Rush Request')),
                ('wh_received_date', models.DateField(blank=True, null=True, verbose_name='Warehouse Received Date')),
                ('ready_date', models.DateField(blank=True, null=True, verbose_name='Package Ready Date')),
                ('weight', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Weight(kg)')),
                ('volume_weight', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Volume Weight(kg)')),
                ('deposit', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Deposit Amount')),
                ('storage_fee', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Storage Fee')),
                ('shipping_fee', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Shipping Fee')),
                ('paid_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Paid Amount')),
                ('currency', models.CharField(blank=True, choices=[('CNY', 'China Yuan'), ('USD', 'US Dollar')], default='', max_length=100, verbose_name='Currency')),
                ('picked_up', models.BooleanField(default=False, verbose_name='Receiver Picked Up')),
                ('picked_up_date', models.DateField(blank=True, null=True, verbose_name='Picked Up Date')),
                ('last_shipped_date', models.DateField(blank=True, null=True, verbose_name='Final Shipping Date')),
                ('tracking_num', models.CharField(blank=True, default='', max_length=50, verbose_name='Final Shipping Tracking Number')),
                ('last_carrier', models.CharField(blank=True, choices=[('ZT', 'Zhong Tong'), ('YT', 'Yuan Tong'), ('UPS', 'UPS'), ('DHL', 'DHL')], default='', max_length=100, verbose_name='Final Shipping Carrier')),
                ('issue', models.TextField(blank=True, default='', verbose_name='Package Issue')),
                ('refund_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Refund Amount')),
                ('deposit_key', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='deposit_payment_key', to='main.Payment', verbose_name='Deposit Confirmation')),
                ('paid_key', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='paid_payment_key', to='main.Payment', verbose_name='Payment Confirmation')),
                ('parent_package', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='main.ParentPackage', verbose_name='Parent Package')),
                ('receiver', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='main.CoReceiver', verbose_name='Receiver')),
                ('refund_key', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='refund_payment_key', to='main.Payment', verbose_name='Refund Confirmation')),
                ('ship_to_add', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='ship_to_personal_location', to='main.Address', verbose_name='Shipping Address')),
            ],
            options={
                'verbose_name_plural': 'Package/Order',
                'ordering': ['created_date'],
            },
        ),
        migrations.CreateModel(
            name='Warehouse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Creation Date')),
                ('address', models.CharField(default='', max_length=500, verbose_name='address')),
                ('apt', models.CharField(blank=True, default='', max_length=200, verbose_name='Address2/Apartment')),
                ('city', models.CharField(default='', max_length=100, verbose_name='City')),
                ('state', models.CharField(default='', max_length=100, verbose_name='State/Province')),
                ('country', models.CharField(default='', max_length=100, verbose_name='Country')),
                ('zipcode', models.CharField(default='', max_length=5, validators=[django.core.validators.RegexValidator(message='Plese Enter a valid zip code.', regex='^(\\d{5})*$')], verbose_name='Zip Code')),
                ('updated_date', models.DateTimeField(auto_now=True, null=True, verbose_name='Warehouse Updated Date')),
                ('name', models.CharField(default='', max_length=100, unique=True, verbose_name='Warehouse Name')),
                ('status', models.BooleanField(default=False, verbose_name='Avaliable')),
                ('memo', models.TextField(blank=True, default='', verbose_name='Memo')),
            ],
            options={
                'verbose_name_plural': 'Warehouse',
                'ordering': ['-pk'],
            },
        ),
        migrations.CreateModel(
            name='CollectionPoint',
            fields=[
                ('created_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Creation Date')),
                ('address', models.CharField(default='', max_length=500, verbose_name='address')),
                ('apt', models.CharField(blank=True, default='', max_length=200, verbose_name='Address2/Apartment')),
                ('city', models.CharField(default='', max_length=100, verbose_name='City')),
                ('state', models.CharField(default='', max_length=100, verbose_name='State/Province')),
                ('country', models.CharField(default='', max_length=100, verbose_name='Country')),
                ('zipcode', models.CharField(default='', max_length=5, validators=[django.core.validators.RegexValidator(message='Plese Enter a valid zip code.', regex='^(\\d{5})*$')], verbose_name='Zip Code')),
                ('memo', models.TextField(blank=True, default='', verbose_name='Memo')),
                ('updated_date', models.DateTimeField(auto_now=True, null=True, verbose_name='Collection Point Updated Date')),
                ('collector', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL, verbose_name='Collector')),
                ('license_type', models.CharField(blank=True, default='', max_length=100, verbose_name='License Type')),
                ('license_image', models.ImageField(blank=True, upload_to='collector_license', verbose_name='License Image')),
                ('id_image', models.ImageField(upload_to='collector_id', verbose_name='ID Image')),
                ('store_name', models.CharField(blank=True, default='', max_length=100, verbose_name='Store Name')),
                ('store', models.BooleanField(default=True, verbose_name='Store')),
                ('name', models.CharField(default='', max_length=16, unique=True, verbose_name='Collection Point Name')),
                ('wechat', models.CharField(blank=True, max_length=100, null=True, unique=True, verbose_name='WeChat Name')),
                ('wechat_qrcode', models.ImageField(blank=True, default='', upload_to='collector_wechat', verbose_name='Wechat QRcode')),
                ('referrer', models.CharField(blank=True, default='', max_length=100, verbose_name='Referrer')),
                ('apply_reason', models.TextField(blank=True, default='', verbose_name='Apply Reason')),
                ('info_source', models.CharField(blank=True, choices=[('WC', 'WeChat'), ('DN', 'Dealmoon')], default='', max_length=100, verbose_name='Information Source')),
                ('food', models.BooleanField(default=False, verbose_name='Food')),
                ('regular', models.BooleanField(default=False, verbose_name='Regular')),
                ('skincare', models.BooleanField(default=False, verbose_name='Skincare')),
                ('status', models.BooleanField(default=False, verbose_name='Avaliable')),
                ('collector_icon', models.ImageField(blank=True, upload_to='collector_icon', verbose_name='Collector Icon')),
                ('description', models.TextField(blank=True, default='', verbose_name='description')),
                ('mon_start', models.TimeField(blank=True, null=True)),
                ('mon_end', models.TimeField(blank=True, null=True)),
                ('tue_start', models.TimeField(blank=True, null=True)),
                ('tue_end', models.TimeField(blank=True, null=True)),
                ('wed_start', models.TimeField(blank=True, null=True)),
                ('wed_end', models.TimeField(blank=True, null=True)),
                ('thu_start', models.TimeField(blank=True, null=True)),
                ('thu_end', models.TimeField(blank=True, null=True)),
                ('fri_start', models.TimeField(blank=True, null=True)),
                ('fri_end', models.TimeField(blank=True, null=True)),
                ('sat_start', models.TimeField(blank=True, null=True)),
                ('sat_end', models.TimeField(blank=True, null=True)),
                ('sun_start', models.TimeField(blank=True, null=True)),
                ('sun_end', models.TimeField(blank=True, null=True)),
                ('absent_start', models.DateField(blank=True, null=True, verbose_name='Absent Start')),
                ('absent_end', models.DateField(blank=True, null=True, verbose_name='Absent End')),
            ],
            options={
                'verbose_name_plural': 'Collection Point',
                'ordering': ['-pk'],
            },
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('employee', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL, verbose_name='Employee')),
                ('position', models.CharField(blank=True, default='', max_length=200, verbose_name='Employee Position')),
                ('date_joined', models.DateField(blank=True, null=True, verbose_name='Recruitment Date')),
                ('date_left', models.DateField(blank=True, null=True, verbose_name='Resignation Date')),
                ('created_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Creation Date')),
                ('updated_date', models.DateTimeField(auto_now=True, null=True, verbose_name='Employee Profile Updated Date')),
                ('is_active', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name_plural': 'Employees',
                'ordering': ['-pk'],
            },
        ),
        migrations.AddField(
            model_name='service',
            name='ship_to_wh',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='ship_to_warehouse', to='main.Warehouse', verbose_name='Ship to Warehouse'),
        ),
        migrations.AddField(
            model_name='service',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='client_user', to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AddField(
            model_name='service',
            name='wh_received',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='received_at_warehouse', to='main.Warehouse', verbose_name='Warehouse Received'),
        ),
        migrations.AddField(
            model_name='packagesnapshot',
            name='package',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='main.Service', verbose_name='Package'),
        ),
        migrations.AddField(
            model_name='item',
            name='service',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='main.Service', verbose_name='Package/Order'),
        ),
        migrations.AddField(
            model_name='coupon',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AlterUniqueTogether(
            name='coreceiver',
            unique_together={('first_name', 'last_name', 'phone')},
        ),
        migrations.AddField(
            model_name='address',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AddField(
            model_name='user',
            name='default_address',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='default_address', to='main.Address', verbose_name='Default Shipping Address'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='service',
            name='emp_created',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='order_created_by_emplloyee', to='main.Employee', verbose_name='Created by Employee'),
        ),
        migrations.AddField(
            model_name='service',
            name='emp_pack',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='package_repacked_by_employee', to='main.Employee', verbose_name='Packed by Employee'),
        ),
        migrations.AddField(
            model_name='service',
            name='ship_to_col',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='ship_to_collection_point', to='main.CollectionPoint', verbose_name='Shipping Collection Point location'),
        ),
        migrations.AddField(
            model_name='parentpackage',
            name='emp_pack',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='package_pack_by_employee', to='main.Employee', verbose_name='Packed by Employee'),
        ),
        migrations.AddField(
            model_name='parentpackage',
            name='emp_split',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='emplloyee_splited_package', to='main.Employee', verbose_name='Splitted by Employee'),
        ),
        migrations.AddField(
            model_name='item',
            name='order_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='main.Employee', verbose_name='Order by Employee'),
        ),
        migrations.AlterUniqueTogether(
            name='address',
            unique_together={('user', 'first_name', 'last_name', 'phone', 'address', 'apt', 'city', 'state', 'zipcode')},
        ),
        migrations.AddField(
            model_name='user',
            name='default_col',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='main.CollectionPoint', verbose_name='Default Collection Point'),
        ),
    ]
